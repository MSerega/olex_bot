from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from loader import dp
from keyboards import default as kb
from settings.config import ADMIN


class FSMAdmin(StatesGroup):
    title_news = State()
    text_news = State()


@dp.message_handler(commands='news', chat_type=types.ChatType.PRIVATE, state="*")
async def command_news(message: types.Message):
    await FSMAdmin.title_news.set()
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞—à–æ—ó –Ω–æ–≤–∏–Ω–∏", reply_markup=kb.cancel_fsm)


@dp.message_handler(Text(equals="üì§ –°–∫–∞—Å—É–≤–∞—Ç–∏"), state=FSMAdmin)
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer("–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏.",
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=FSMAdmin.title_news)
async def set_title_news(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.chat.has_private_forwards:
            data['user_id'] = "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        else:
            data['user_id'] = message.from_user.id
            data['title_news'] = message.text
    await FSMAdmin.next()
    await message.answer('–û–ø–∏—à—ñ—Ç—å –Ω–æ–≤–∏–Ω—É, —è–∫—â–æ —î —Ñ–æ—Ç–æ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏, –æ–ø–∏—Å –Ω–æ–≤–∏–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥ —Ñ–æ—Ç–æ',
                         reply_markup=kb.cancel_fsm)


@dp.message_handler(content_types=['photo', 'text'], state=FSMAdmin.text_news)
async def set_text_news(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        kb_connect = types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton("‚úâ –ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –∞–≤—Ç–æ—Ä–æ–º –Ω–æ–≤–∏–Ω–∏", url=f"tg://user?id={data['user_id']}"))
        if not message.text:
            data['photo_id'] = message.photo[0].file_id
            data['caption'] = message.caption
            await dp.bot.send_photo(ADMIN, data['photo_id'], caption=f"–Ñ –Ω–æ–≤–∏–Ω–∞ –≤ –≥—Ä—É–ø—É "
                                                                     f"–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{data['user_id']}</code>:\n"
                                                                     f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['title_news']}\n"
                                                                     f"–û–ø–∏—Å: {data['caption']}\n", reply_markup=kb_connect)
        else:
            data['text_news'] = message.text
            await dp.bot.send_message(ADMIN, f"–Ñ –Ω–æ–≤–∏–Ω–∞ –≤ –≥—Ä—É–ø—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{data['user_id']}</code>:\n"
                                             f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['title_news']}\n"
                                             f"–û–ø–∏—Å: {data['text_news']}\n", reply_markup=kb_connect)
    await state.finish()
    await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –Ω–æ–≤–∏–Ω—É. –ü—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º, –Ω–æ–≤–∏–Ω–∞ –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø—ñ.",
                         reply_markup=types.ReplyKeyboardRemove())
