from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from loader import dp
from keyboards import default as kb
from settings import functions


class FSM_poshta(StatesGroup):
    poshta = State()
    ukrposhta = State()
    ukr_info = State()
    novaposhta = State()
    nova_info = State()


@dp.message_handler(text="üöö –ü–æ—à—Ç–∞", chat_type=types.ChatType.PRIVATE, state="*")
async def cmd_poshta(message: types.Message):
    await functions.userInDb(message)
    await FSM_poshta.poshta.set()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é",
                         reply_markup=kb.poshta,
                         disable_notification=True)


@dp.message_handler(Text(equals="üëàÔ∏è –ù–∞–∑–∞–¥"), state=FSM_poshta)
async def back_state(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    state_ = current_state.split(':')[1]
    if state_ in ['ukrposhta', 'novaposhta']:
        await FSM_poshta.poshta.set()
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.poshta)
    elif state_ == 'nova_info':
        await FSM_poshta.novaposhta.set()
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.novaposhta)
    elif state_ == 'ukr_info':
        await FSM_poshta.ukrposhta.set()
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.ukrposhta)
    elif state_ == 'poshta':
        if current_state is None:
            return
        await state.finish()
        await message.answer("–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é. –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.main_menu)


@dp.message_handler(Text(equals="üöö –£–∫—Ä–ø–æ—à—Ç–∞"), state=FSM_poshta.poshta)
async def poshta_ukr(message: types.Message, state: FSMContext):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.ukrposhta)
    await FSM_poshta.ukrposhta.set()


@dp.message_handler(Text(equals="üöö –ù–æ–≤–∞ –ü–æ—à—Ç–∞"), state=FSM_poshta.poshta)
async def poshta_ukr(message: types.Message, state: FSMContext):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.novaposhta)
    await FSM_poshta.novaposhta.set()


@dp.message_handler(Text(equals="üì¶ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ1"), state=FSM_poshta.novaposhta)
async def novaposhta_post1(message: types.Message, state: FSMContext):
    await message.answer(
        f"<code><b>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ1:</b>\n"
        "–ê–¥—Ä–µ—Å–∞: —Å–º—Ç –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∞ (—Ä–∞–π.—Ü–µ–Ω—Ç—Ä), –≤—É–ª. –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏, 106\n"
        "–¶–∏—Ñ—Ä–æ–≤–∞ –∞–¥—Ä–µ—Å–∞: 95277 / 1\n\n</code>",
        reply_markup=kb.back_btn)
    await FSM_poshta.nova_info.set()


@dp.message_handler(Text(equals="üì¶ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ2"), state=FSM_poshta.novaposhta)
async def novaposhta_post2(message: types.Message, state: FSMContext):
    await message.answer(
        f"<code><b>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ2:</b>\n"
        "–ê–¥—Ä–µ—Å–∞: —Å–º—Ç –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∞ (—Ä–∞–π.—Ü–µ–Ω—Ç—Ä), –≤—É–ª.–®–µ–≤—á–µ–Ω–∫–∞, 17–∞\n"
        "–¶–∏—Ñ—Ä–æ–≤–∞ –∞–¥—Ä–µ—Å–∞: 95277 / 2\n\n</code>",
        reply_markup=kb.back_btn)
    await FSM_poshta.nova_info.set()


@dp.message_handler(Text(equals="üóì –ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏"), state=FSM_poshta.novaposhta)
async def novaposhta_graffic(message: types.Message, state: FSMContext):
    await message.answer(
        f"<b>–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ù–æ–≤–æ—ó –ø–æ—à—Ç–∏:</b>\n"
        "–ü–Ω: 09:00-19:00\n"
        "–í—Ç: 09:00-19:00\n"
        "–°—Ä: 09:00-19:00\n"
        "–ß—Ç: 09:00-19:00\n"
        "–ü—Ç: 09:00-19:00\n"
        "–°–±: 09:00-18:00\n"
        "–ù–¥: 10:00-18:00",
        reply_markup=kb.back_btn)
    await FSM_poshta.nova_info.set()


@dp.message_handler(Text(equals="üì¶ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è"), state=FSM_poshta.ukrposhta)
async def ukrposhta_address(message: types.Message, state: FSMContext):
    await message.answer(
        f"<code><b>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –£–∫—Ä–ø–æ—à—Ç–∏</b>\n"
        "–ê–¥—Ä–µ—Å–∞: –≤—É–ª. –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏, 17, —Å–º—Ç –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∞, –ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π —Ä–∞–π–æ–Ω, –ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\n"
        "–Ü–Ω–¥–µ–∫—Å: 27300</code>",
        reply_markup=kb.back_btn)
    await FSM_poshta.ukr_info.set()


@dp.message_handler(Text(equals="üóì –ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏"), state=FSM_poshta.ukrposhta)
async def ukrposhta_graffic(message: types.Message, state: FSMContext):
    await message.answer(
        f"<b>–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –£–∫—Ä–ø–æ—à—Ç–∏:</b>\n"
        "–ü–Ω: 08:00-18:00\n"
        "–í—Ç: 08:00-18:00\n"
        "–°—Ä: 08:00-18:00\n"
        "–ß—Ç: 08:00-18:00\n"
        "–ü—Ç: 08:00-18:00\n"
        "–°–±: 09:00-15:00\n",
        reply_markup=kb.back_btn)
    await FSM_poshta.ukr_info.set()

