from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

from loader import dp
from keyboards import default as kb
from scripts.train import get_trains
from settings import functions


class FSM_transport(StatesGroup):
    transport = State()
    bus = State()
    taxi = State()
    trains = State()
    suburban_trains = State()
    passenger_trains = State()


@dp.message_handler(text="üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", chat_type=types.ChatType.PRIVATE, state="*")
async def cmd_poshta(message: types.Message):
    await functions.userInDb(message)
    await FSM_transport.transport.set()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é",
                         reply_markup=kb.transport_menu,
                         disable_notification=True)


@dp.message_handler(Text(equals="üëàÔ∏è –ù–∞–∑–∞–¥"), state=FSM_transport)
async def back_state(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    state_ = current_state.split(':')[1]
    if state_ in ['bus', 'taxi', 'trains']:
        await FSM_transport.transport.set()
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.transport_menu)
    if state_ in ['suburban_trains', 'passenger_trains']:
        await FSM_transport.trains.set()
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.trains_menu)
    elif state_ == 'transport':
        if current_state is None:
            return
        await state.finish()
        await message.answer("–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é. –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.main_menu)


@dp.message_handler(Text(equals="üöã –ü–æ—ó–∑–¥–∏"), state=FSM_transport.transport)
async def trains(message: types.Message, state: FSMContext):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.trains_menu)
    await FSM_transport.trains.set()


@dp.message_handler(Text(equals="üöå –ê–≤—Ç–æ–±—É—Å–∏"), state=FSM_transport.transport)
async def poshta_ukr(message: types.Message, state: FSMContext):
    await message.answer(
        f"–†–æ–∑–∫–ª–∞–¥ —Ä—É—Ö—É –∞–≤—Ç–æ–±—É—Å—ñ–≤ —á–µ—Ä–µ–∑ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫—É:\n\n"
        f"–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∞ - –ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π:\n"
        f"‚è± 06:00, ‚è± 07:00, ‚è± 09:50, ‚è± 11:20,\n"
        f"‚è± 12:00, ‚è± 13:25, ‚è± 16:30\n\n"
        f"–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π - –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∞:\n"
        f"‚è± 07:30, ‚è± 08:50, ‚è± 10:00, ‚è± 12:20,\n"
        f"‚è± 12:30, ‚è± 14:20, ‚è± 15:20, ‚è± 16:00\n\n"

        f"–∑ 20 –≥—Ä—É–¥–Ω—è 2022 —Ä–æ–∫—É –ø–æ 20 —Å—ñ—á–Ω—è 2023 —Ä–æ–∫—É\n\n"
        f"–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∞ - –ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π:\n"
        f"‚è± 7.45\n\n" 
        f"–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π - –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∞:\n"
        f"‚è± 17.30", reply_markup=kb.back_btn)
    await FSM_transport.bus.set()


@dp.message_handler(Text(equals="üöå –ê–≤—Ç–æ–±—É—Å–∏"), state=FSM_transport.transport)
async def poshta_ukr(message: types.Message, state: FSMContext):
    await message.answer(
        f"–†–æ–∑–∫–ª–∞–¥ —Ä—É—Ö—É –∞–≤—Ç–æ–±—É—Å—ñ–≤ —á–µ—Ä–µ–∑ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫—É:\n\n"
        f"–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∞ - –ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π:\n"
        f"‚è± 06:00, ‚è± 07:00, ‚è± 09:50, ‚è± 11:20,\n"
        f"‚è± 12:00, ‚è± 13:25, ‚è± 16:30\n\n"
        f"–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π - –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∞:\n"
        f"‚è± 07:30, ‚è± 08:50, ‚è± 10:00, ‚è± 12:20,\n"
        f"‚è± 12:30, ‚è± 14:20, ‚è± 15:20, ‚è± 16:00\n\n"

        f"–∑ 20 –≥—Ä—É–¥–Ω—è 2022 —Ä–æ–∫—É –ø–æ 20 —Å—ñ—á–Ω—è 2023 —Ä–æ–∫—É\n\n"
        f"–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∞ - –ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π:\n"
        f"‚è± 7.45\n\n" 
        f"–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π - –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∞:\n"
        f"‚è± 17.30", reply_markup=kb.back_btn)
    await FSM_transport.bus.set()


@dp.message_handler(Text(equals="üöû –ü—Ä–∏–º—ñ—Å—å–∫—ñ –ø–æ—ó–∑–¥–∏"), state=FSM_transport.trains)
async def suburban_trains(message: types.Message, state: FSMContext):
    trains_list = get_trains()
    trains = ''
    for train in trains_list:
        trains += f"üöä –ü–æ—ó–∑–¥ ‚Ññ: {train['number']}\n" \
                 f"üìÖ –ü–µ—Ä—ñ–æ–¥: {train['days']}\n" \
                 f"üìã –ú–∞—Ä—à—Ä—É—Ç: {train['way']}\n" \
                 f"üï∞ –ß–∞—Å –ø—Ä–∏–±—É—Ç—Ç—è: {train['time_start']}\n" \
                 f"üï∞ –ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {train['time_end']}\n\n"
    await message.answer(f"–†–æ–∑–∫–ª–∞–¥ —Ä—É—Ö—É –ø—Ä–∏–º—ñ—Å—å–∫–∏—Ö –ø–æ—ó–∑–¥—ñ–≤ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω—Ü—ñ—é –§—É–Ω–¥—É–∫–ª—ñ—ó–≤–∫–∞:\n\n" + trains,
                         reply_markup=kb.back_btn)
    await FSM_transport.suburban_trains.set()

