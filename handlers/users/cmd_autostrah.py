import asyncio
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from loader import dp, bot
from keyboards import default as kb
from .states_services import FSM_services
from db.db_connect import insurance_auto


@dp.message_handler(Text(equals="üöò C—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è"), state=FSM_services.services)
async def cmd_insurance(message: types.Message, state: FSMContext):
    await message.answer("–î–ª—è —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ")
    await asyncio.sleep(1)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤—É –∫–æ–º–ø–∞–Ω—ñ—é, —è–∫–∞ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–∞–º —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –Ω–∞ –≤–∞—à–µ –∞–≤—Ç–æ.",
                         reply_markup=kb.officeInsurance)
    await FSM_services.officeInsurance.set()


@dp.message_handler(Text(equals=['üöó –¢–ê–°']), state=FSM_services.officeInsurance)
async def get_officeInsurance(message: types.Message, state: FSMContext):
    if message.text is not None:
        async with state.proxy() as data:
            data['user_id'] = message.from_user.id
            if message.text == 'üöó –¢–ê–°':
                data['officeInsurance'] = '145333452'
            else:
                data['officeInsurance'] = '–Ü–Ω—à–∞ —Ñ—ñ—Ä–º–∞'
        await message.answer("–ü—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ–≥–æ –∫–æ–¥—É, —Ç–∞–∫ —â–æ–± –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–º—ñ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏",
                             reply_markup=kb.cancel_fsm)
        await FSM_services.userCode.set()


@dp.message_handler(content_types=['photo', 'text'], state=FSM_services.userCode)
async def get_userCode(message: types.Message, state: FSMContext):
    if message.photo:
        async with state.proxy() as data:
            data['userCode'] = message.photo[-1].file_id
        await message.answer("–ü—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —Ñ–æ—Ç–æ –æ–¥–Ω–æ–≥–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:"
                             "\n- –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è;"
                             "\n- –ø–∞—Å–ø–æ—Ä—Ç;"
                             "\n- –ø–µ–Ω—Å—ñ–π–Ω–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –ø–µ–Ω—Å—ñ–π–Ω–µ;"
                             "\n- –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫–∞ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π (–£–ë–î)")
        await FSM_services.driver_passport.set()
    else:
        await message.answer("–í–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ —Ñ–æ—Ç–æ. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")


@dp.message_handler(content_types=['photo', 'text'], state=FSM_services.driver_passport)
async def get_driverPassport(message: types.Message, state: FSMContext):
    if message.photo:
        async with state.proxy() as data:
            data['driverPassport'] = message.photo[-1].file_id
        await message.answer("–ü—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —Ñ–æ—Ç–æ <b>–ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏</b> —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç—É")
        await FSM_services.technical_passport01.set()
    else:
        await message.answer("–í–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ —Ñ–æ—Ç–æ. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")


@dp.message_handler(content_types=['photo', 'text'], state=FSM_services.technical_passport01)
async def get_technicalPassport(message: types.Message, state: FSMContext):
    if message.photo:
        async with state.proxy() as data:
            data['technicalPassport01'] = message.photo[-1].file_id
        await FSM_services.technical_passport02.set()
        await message.answer("–ü—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —Ñ–æ—Ç–æ <b>–¥—Ä—É–≥–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏</b> —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç—É")
    else:
        await message.answer("–í–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ —Ñ–æ—Ç–æ. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")


@dp.message_handler(content_types=['photo', 'text'], state=FSM_services.technical_passport02)
async def get_technicalPassport(message: types.Message, state: FSMContext):
    if message.photo:
        async with state.proxy() as data:
            data['technicalPassport02'] = message.photo[-1].file_id
        await FSM_services.phone_ownerCar.set()
        await message.answer("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä –º–æ–±—ñ–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    else:
        await message.answer("–í–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ —Ñ–æ—Ç–æ. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")


@dp.message_handler(state=FSM_services.phone_ownerCar)
async def get_phoneOwnerCar(message: types.Message, state: FSMContext):
    if message.text is not None:
        async with state.proxy() as data:
            data['phoneOwnerCar'] = message.text
        await state.finish()
        mediaGroup = types.MediaGroup()
        mediaGroup.attach_photo(data['userCode'], '–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π –∫–æ–¥')
        mediaGroup.attach_photo(data['driverPassport'], '–ü–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è')
        mediaGroup.attach_photo(data['technicalPassport01'], '–¢–µ—Ö–Ω—ñ—á–Ω–∏–π –ø–∞—Å–ø–æ—Ä—Ç 1 —Å—Ç–æ—Ä—ñ–Ω–∫–∞')
        mediaGroup.attach_photo(data['technicalPassport02'], '–¢–µ—Ö–Ω—ñ—á–Ω–∏–π –ø–∞—Å–ø–æ—Ä—Ç 2 —Å—Ç–æ—Ä—ñ–Ω–∫–∞')
        insurance_auto(data)
        await bot.send_media_group(data['officeInsurance'], media=mediaGroup)
        await bot.send_message(data['officeInsurance'], "–í—ñ—Ç–∞—é, —É –≤–∞—Å —î –Ω–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏.\n"
                                                        "–í–∏—â–µ —è –ø—Ä–∏–∫—Ä—ñ–ø–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∏, —è–∫—ñ –º–µ–Ω—ñ –Ω–∞–¥–∞–≤ –≤–ª–∞—Å–Ω–∏–∫ –∞–≤—Ç–æ\n"
                                                        f"–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –π–æ–º—É –∑–∞ –Ω–æ–º–µ—Ä–æ–º: {data['phoneOwnerCar']}")
        await FSM_services.services.set()
        await message.answer("–î—è–∫—É—î–º–æ. –í–∞—à—ñ –¥–∞–Ω—ñ –ø—Ä–∏–π–Ω—è—Ç–æ –≤ –æ–±—Ä–æ–±–∫—É. –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –≤—ñ–¥ —Å—Ç–∞—Ö–æ–≤–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó",
                             reply_markup=kb.services_menu)