from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from db import db_connect as db
from loader import dp
from settings.config import ADMIN


class FSMAdmin(StatesGroup):
    station = State()
    fuel = State()
    accept = State()


stations = {
    '‚õΩ Shell': types.ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=False,
        keyboard=[['‚õΩ –ê-92', '‚õΩ –ê-95'], ['‚õΩ –î–ü', '‚õΩ –ì–∞–∑'], ['üíæ –ó–±–µ—Ä–µ–≥—Ç–∏'], ['üëàÔ∏è –ù–∞–∑–∞–¥']]),
    '‚õΩ MAC': types.ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=False,
        keyboard=[['‚õΩ –ê-92', '‚õΩ –ê-95', '‚õΩ –î–ü'], ['üíæ –ó–±–µ—Ä–µ–≥—Ç–∏'], ['üëàÔ∏è –ù–∞–∑–∞–¥']]),
    '‚õΩ Belarus': types.ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=False,
        keyboard=[['‚õΩ –ì–∞–∑'], ['üíæ –ó–±–µ—Ä–µ–≥—Ç–∏'], ['üëàÔ∏è –ù–∞–∑–∞–¥']])
}


@dp.message_handler(commands="fuels", chat_id=ADMIN)
@dp.message_handler(Text(equals="‚õΩ –ù–∞—è–≤–Ω—ñ—Å—Ç—å –ø–∞–ª—å–Ω–æ–≥–æ", ignore_case=True), state="*")
async def fuels_start(message: types.Message):
    await FSMAdmin.station.set()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True) \
        .add('‚õΩ Shell', '‚õΩ MAC', '‚õΩ Belarus').add('üì§ –í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ')
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø—Ä–∞–≤–∫—É", reply_markup=markup, disable_notification=True)


@dp.message_handler(Text(equals="üì§ –í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ"), state=FSMAdmin.station)
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer("–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ. –¢–µ–ø–µ—Ä –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞",
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(Text(equals="üëàÔ∏è –ù–∞–∑–∞–¥"), state=['station', 'fuel', 'accept'])
async def back_state(message: types.Message, state: FSMContext):
    global stations

    current_state = await state.get_state()
    if current_state.split(':')[1] == 'fuel':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True) \
            .add('‚õΩ Shell', '‚õΩ MAC', '‚õΩ Belarus').add('üì§ –í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ')
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø—Ä–∞–≤–∫—É", reply_markup=markup, disable_notification=True)
        await state.reset_data()
        await FSMAdmin.previous()
    if current_state.split(':')[1] == 'accept':
        stations_name = {
            'Shell': '‚õΩ Shell',
            'Mac': '‚õΩ MAC',
            'Belarus': '‚õΩ Belarus',
        }
        markup = stations[stations_name[(await state.get_data())['station']]]
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–∞–ª—å–Ω–µ", reply_markup=markup, disable_notification=True)
        await FSMAdmin.previous()


@dp.message_handler(state=FSMAdmin.station)
async def set_station(message: types.Message, state: FSMContext):
    global stations
    stations_name = {
        '‚õΩ Shell': 'Shell',
        '‚õΩ MAC': 'Mac',
        '‚õΩ Belarus': 'Belarus',
    }

    async with state.proxy() as data:
        data['station'] = stations_name[message.text]

    await message.answer("–í–∫–∞–∂—ñ—Ç—å –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–∞–ª—å–Ω–æ–≥–æ",
                         reply_markup=stations[message.text],
                         disable_notification=True)
    await FSMAdmin.next()


@dp.message_handler(Text(equals="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", ignore_case=True), state="*")
@dp.message_handler(state="*", commands="/–ó–±–µ—Ä–µ–≥—Ç–∏")
async def save_fuel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    async with state.proxy() as data:
        print(data)
    await db.update_db(state)
    await state.finish()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True) \
        .add('‚õΩ Shell', '‚õΩ MAC', '‚õΩ Belarus').add('üì§ –í–∏–π—Ç–∏ –∑ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ')
    await message.answer("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ", reply_markup=markup, disable_notification=True)
    await FSMAdmin.station.set()


@dp.message_handler(Text(equals=["‚õΩ –ê-95", "‚õΩ –ê-92", "‚õΩ –î–ü", "‚õΩ –ì–∞–∑"]), state=FSMAdmin.fuel)
async def set_fuel(message: types.Message, state: FSMContext):
    dict_fuel = {
        "‚õΩ –ê-95": "fuel_95",
        "‚õΩ –ê-92": "fuel_92",
        "‚õΩ –î–ü": "fuel_diezel",
        "‚õΩ –ì–∞–∑": "fuel_gaz"
    }
    async with state.proxy() as data:
        data.setdefault("choise_fuel", {})
        data['choise_fuel'][dict_fuel[message.text]] = None

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add('‚úÖ –¢–∞–∫', '‚ùå –ù—ñ').add(
        'üëàÔ∏è –ù–∞–∑–∞–¥')

    await message.answer("–ë–µ–Ω–∑–∏–Ω –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ", reply_markup=markup, disable_notification=True)
    await FSMAdmin.next()


@dp.message_handler(state=FSMAdmin.accept)
async def btn_yes_no(message: types.Message, state: FSMContext):
    global stations

    async with state.proxy() as data:
        for key, value in data["choise_fuel"].items():
            if value is None:
                data["choise_fuel"][key] = 1 if "‚úÖ –¢–∞–∫" == message.text else 0
                break

    stations_name = {
        'Shell': '‚õΩ Shell',
        'Mac': '‚õΩ MAC',
        'Belarus': '‚õΩ Belarus',
    }
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ª—å–Ω–µ", reply_markup=stations[stations_name[(await state.get_data())['station']]])
    await FSMAdmin.fuel.set()
