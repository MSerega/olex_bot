import asyncio
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from loader import dp
from settings.config import ADMIN
import keyboards as kb
from settings.functions import userInDb


class FSMAdmin(StatesGroup):
    screen_pay = State()
    ads_text = State()


@dp.message_handler(commands=['advertising'], chat_type=types.ChatType.PRIVATE, state="*")
async def advertising(message: types.Message):
    await userInDb(message)
    await message.answer("–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ, —â–æ–± –≤–∞—à–µ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (–∫—É–ø–ª—é/–ø—Ä–æ–¥–∞–º/–ø–æ—Å–ª—É–≥–∏) "
                         "–±—É–ª–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ –≤ –≥—Ä—É–ø—ñ —á–∏ –∫–∞–Ω–∞–ª—ñ - –ø—Ä–æ—à—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ, –ø–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏ 80 –≥—Ä–Ω –Ω–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ "
                         "–≥—Ä—É–ø–∏",
                         reply_markup=kb.inline.advertising, disable_notification=True)

    await asyncio.sleep(3)
    await FSMAdmin.screen_pay.set()
    await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è",
                         reply_markup=kb.default.cancel_fsm, disable_notification=True)


@dp.message_handler(Text(equals="üì§ –°–∫–∞—Å—É–≤–∞—Ç–∏"), state=FSMAdmin)
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer("–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è",
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(content_types=['photo'], state=FSMAdmin.screen_pay)
async def screen_pay(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_id'] = message.from_user.id
        data['photo_id'] = message.photo[0].file_id
    await FSMAdmin.next()
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —Ä–µ–∫–ª–∞–º–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", reply_markup=kb.default.cancel_fsm, disable_notification=True)


@dp.message_handler(state=FSMAdmin.ads_text)
async def text_of_advertising(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['ads_text'] = message.text
    await state.finish()
    await message.answer("–Ø–∫ —Ç—ñ–ª—å–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É, –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø—ñ —Ç–∞ –∫–∞–Ω–∞–ª—ñ", disable_notification=True)

    kb_contact = types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton("‚úâ –ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –∞–≤—Ç–æ—Ä–æ–º", url=f"tg://user?id={data['user_id']}"))

    await dp.bot.send_photo(ADMIN, data['photo_id'], caption=f"{data['ads_text']}", reply_markup=kb_contact)
